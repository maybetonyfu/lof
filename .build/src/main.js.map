{
  "version": 3,
  "sources": ["../../src/main.ts"],
  "sourcesContent": ["import { parse } from \"@typescript-eslint/parser\"\nimport { analyze, ScopeManager } from \"@typescript-eslint/scope-manager\";\nimport type { TSESTree as AST } from '@typescript-eslint/types';\nimport { AST_NODE_TYPES } from \"@typescript-eslint/types\";\n\nfunction simpleParser(code: string): AST.Node {\n  return parse(code, {\n    ecmaVersion: 2020,\n    sourceType: \"script\",\n    range: true,\n  })\n}\n\nfunction simpleScope(ast: AST.Node): ScopeManager {\n  return analyze(ast, {\n    ecmaVersion: 2020,\n    sourceType: 'script',\n  });\n}\n\nfunction runNode(node: AST.Node) {\n  switch (node.type) {\n    case AST_NODE_TYPES.VariableDeclaration:\n      return parseVariableDeclaration(node);\n    case AST_NODE_TYPES.FunctionDeclaration:\n      return parseFunctionDeclaration(node);\n  }\n}\nfunction parseVariableDeclaration(node: AST.VariableDeclaration) {\n}\n\nfunction parseVariableDeclarator(node: AST.VariableDeclarator) {\n  let id = node.id;\n  if (node.hasOwnProperty('typeAnnotation')) {\n  }\n}\nfunction parseFunctionDeclaration(node: AST.FunctionDeclaration) {\n}\n\nfunction generateConstraints() {\n\n}\nconsole.log(\"hello\")\n\nexport { simpleParser, simpleScope, generateConstraints }"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsB;AACtB,2BAAsC;AAEtC,mBAA+B;AAE/B,SAAS,aAAa,MAAwB;AAC5C,aAAO,qBAAM,MAAM;AAAA,IACjB,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,OAAO;AAAA,EACT,CAAC;AACH;AAEA,SAAS,YAAY,KAA6B;AAChD,aAAO,8BAAQ,KAAK;AAAA,IAClB,aAAa;AAAA,IACb,YAAY;AAAA,EACd,CAAC;AACH;AAEA,SAAS,QAAQ,MAAgB;AAC/B,UAAQ,KAAK,MAAM;AAAA,IACjB,KAAK,4BAAe;AAClB,aAAO,yBAAyB,IAAI;AAAA,IACtC,KAAK,4BAAe;AAClB,aAAO,yBAAyB,IAAI;AAAA,EACxC;AACF;AACA,SAAS,yBAAyB,MAA+B;AACjE;AAEA,SAAS,wBAAwB,MAA8B;AAC7D,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,eAAe,gBAAgB,GAAG;AAAA,EAC3C;AACF;AACA,SAAS,yBAAyB,MAA+B;AACjE;AAEA,SAAS,sBAAsB;AAE/B;AACA,QAAQ,IAAI,OAAO;",
  "names": []
}
